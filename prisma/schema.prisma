generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  role               UserRoles
  refreshToken       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PasswordResetToken PasswordResetToken[]
  cultivarReviews    CultivarReview[]
}

model Country {
  id            String     @id @default(uuid())
  gentilico     String
  nome_pais     String     @unique
  nome_pais_int String
  sigla         String
  environments   Environment[]
}

model Constant {
  id                String             @id @default(uuid())
  value             Float
  type              ConstantTypes
  comment           String?
  environmentId     String
  environment       Environment        @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  cultivarId        String
  cultivar          Cultivar           @relation(fields: [cultivarId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  referenceId       String
  reference         Reference          @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  status            ReviewStatus       @default(PENDING)
  reviewId          String?
  Review            CultivarReview?    @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([referenceId, environmentId, cultivarId, type])
}

model Environment {
  id                String             @id @default(uuid())
  climate           String?           
  biome             String?             
  customBiome       String?            
  irrigation        IrrigationTypes?   
  countryId         String
  country           Country            @relation(fields: [countryId], references: [id], onDelete: Cascade)
  soil              SoilTypes?        
  customSoil        String?            
  cultivationSystem CultivationSystem? 
  constants         Constant[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Reviews           CultivarReview[]
}

model Reference {
  id                  String       @id @default(uuid())
  title               String
  comment             String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt   
  cultivarReferences  CultivarReference[]
  constants           Constant[]
  cultivarReviews     CultivarReview[]
  status              ReviewStatus @default(PENDING)
}

model Crop {
  id             String     @id @default(uuid())
  name           String     @unique
  scientificName String
  cultivars      Cultivar[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Cultivar {
  id                String       @id @default(uuid())
  name              String
  crop              Crop         @relation(fields: [cropId], references: [id], onDelete: Cascade)
  cropId            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  reviews           CultivarReview[]
  cultivarReferences CultivarReference[]
  constants         Constant[]

  @@unique([name, cropId])
}

model PasswordResetToken {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String  @unique
  createdAt DateTime @default(now())

  @@id([userId])
  @@map("PasswordResetTokens")
}

model CultivarReview {
  id             String       @id @default(uuid())
  justification  String?
  Cultivar       Cultivar     @relation(fields: [cultivarId], references: [id], onDelete: Cascade)
  requestedBy    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status         ReviewStatus @default(PENDING)
  userId         String       
  cultivarId     String        
  referenceId    String
  reference      Reference    @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  environmentId  String
  Environment    Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  reviewed_at    DateTime?
  Constants      Constant[]
}

model CultivarReference {
  cultivarId  String    @map("cultivar_id")
  referenceId String    @map("reference_id")
  cultivar    Cultivar  @relation(fields: [cultivarId], references: [id], onDelete: Cascade)
  reference   Reference @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@id([cultivarId, referenceId])
  @@map("CultivarReferences")
}

enum UserRoles {
  ADMIN
  OPERATOR
}

enum ReviewStatus {
  PENDING
  APPROVED
  CHANGES_REQUESTED
  REJECTED
}

enum IrrigationTypes {
  Irrigation
  Dry
}

enum CultivationSystem {
  Conventional
  Organic
  Agroecological
}

enum SoilTypes {
  Clayey
  Sandy
  SandyClay
  Other
}

enum ConstantTypes {
  HARVEST_INDEX
  AERIAL_RESIDUE_INDEX
  PRODUCT_RESIDUE_INDEX
  PRODUCT_DRY_MATTER_FACTOR
  RESIDUE_DRY_MATTER_FACTOR
  BELOWGROUND_INDEX
  WEED_AERIAL_FACTOR
  WEED_BELOWGROUND_INDEX
}
